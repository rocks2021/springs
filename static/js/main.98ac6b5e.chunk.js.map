{"version":3,"sources":["components/Layers.js","App.js","reportWebVitals.js","index.js"],"names":["Layers","borderData","Clark","Nye","Esmeralda","Lincoln","Mineral","LayersControl","position","BaseLayer","checked","name","TileLayer","attribution","url","map","data","geojson","features","geometry","county_name","properties","namelsad","Overlay","LayerGroup","GeoJSON","opacity","fillOpacity","App","useState","springs","setSprings","className","style","marginLeft","width","fontWeight","fontSize","marginBottom","MapContainer","height","center","zoom","scrollWheelZoom","zoomControl","ZoomControl","springsData","eachData","Marker","Latitude","Longitude","eventHandlers","click","Id","Popup","onClose","Location","color","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+vtQAyDeA,EA3CA,WACb,IAAMC,EAAa,CAACC,EAAOC,EAAKC,EAAWC,EAASC,GAEpD,OACE,mCACE,eAACC,EAAA,EAAD,CAAeC,SAAS,WAAxB,UACE,cAACD,EAAA,EAAcE,UAAf,CAAyBC,SAAO,EAACC,KAAK,YAAtC,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,yDAGR,cAACP,EAAA,EAAcE,UAAf,CAAyBE,KAAK,WAA9B,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,kSACZC,IAAI,uDAGPb,EAAWc,KAAI,SAACC,GACf,IAAMC,EAAUD,EAAKE,SAAS,GAAGC,SAC3BC,EAAcJ,EAAKE,SAAS,GAAGG,WAAWC,SAEhD,OACE,mCACE,cAACf,EAAA,EAAcgB,QAAf,CAAuBb,SAAO,EAACC,KAAMS,EAArC,SACE,cAACI,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAEET,KAAMC,EACNS,QAAS,EACTC,YAAa,GAHRP,kB,QCuBVQ,MA1Df,WACE,MAAgCC,mBAAU,MAA1C,mBAAQC,EAAR,KAAiBC,EAAjB,KACA,OACE,qCACE,sBAAKC,UAAU,SAAf,UACE,oBAAIC,MAAO,CAACC,WAAW,OAAvB,wCACA,mBAAGD,MAAQ,CAACE,MAAO,MAAOD,WAAW,MAAME,WAAW,OAAQC,SAAU,OAAQC,aAAc,QAA9F,kNAMF,eAACC,EAAA,EAAD,CACIN,MAAO,CAACO,OAAQ,OAAQL,MAAO,QAC/BM,OAAW,CAAE,UAAW,WACxBC,KAAS,EACTC,iBAAoB,EACpBC,aAAe,EALnB,UAQE,cAAC,EAAD,IAEA,cAACC,EAAA,EAAD,CAAarC,SAAS,aACrBsC,EAAY/B,KAAI,SAAAgC,GAAQ,OACxB,cAACC,EAAA,EAAD,CAEGxC,SAAW,CAACuC,EAASE,SAAUF,EAASG,WACxCC,cAAe,CACbC,MAAO,WACLrB,EAAWgB,MAJVA,EAASM,OAWlBvB,GACA,cAACwB,EAAA,EAAD,CACE9C,SAAW,CAAEsB,EAAQmB,SAAUnB,EAAQoB,WACvCK,QAAS,WACPxB,EAAW,OAHf,SAME,8BACE,4BAAKD,EAAQ0B,kBAOnB,qBAAKxB,UAAU,SAAf,SACE,oBAAGC,MAAO,CAACC,WAAW,MAAOG,SAAS,OAAQD,WAAW,QAAzD,uBAA8E,mBAAGH,MAAO,CAACwB,MAAM,SAAUC,KAAK,yBAAhC,2CC9CvEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98ac6b5e.chunk.js","sourcesContent":["import React from 'react';\nimport { \n  TileLayer, \n  LayersControl,\n  LayerGroup,\n  GeoJSON\n} from 'react-leaflet';\nimport Clark from '../data/Clark.json';\nimport Nye from '../data/Nye.json';\nimport Esmeralda from '../data/Esmeralda.json';\nimport Lincoln from '../data/Lincoln.json';\nimport Mineral from '../data/Mineral.json';\n\n\nconst Layers = () => {\n  const borderData = [Clark, Nye, Esmeralda, Lincoln, Mineral]\n  \n  return (\n    <>\n      <LayersControl position=\"topright\">\n        <LayersControl.BaseLayer checked name=\"Basic Map\">\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer name=\"Topo Map\">\n          <TileLayer\n            attribution='Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n            url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n          />\n        </LayersControl.BaseLayer>\n        {borderData.map((data) => {\n          const geojson = data.features[0].geometry\n          const county_name = data.features[0].properties.namelsad\n          \n          return (\n            <>\n              <LayersControl.Overlay checked name={county_name}>\n                <LayerGroup>\n                  <GeoJSON \n                    key={county_name} \n                    data={geojson}\n                    opacity={1}\n                    fillOpacity={0.0}                                \n                  >                  \n                  </GeoJSON>\n                </LayerGroup>\n              </LayersControl.Overlay>\n            </>\n          )\n        })}\n      </LayersControl>\n    </>\n  )\n}\n\nexport default Layers","import React, { useState } from 'react';\nimport { MapContainer, Marker, Popup, ZoomControl } from 'react-leaflet';\nimport Layers from './components/Layers'\nimport springsData from './data/Springs.json';\n\n\nfunction App() {\n  const [ springs, setSprings ] = useState( null );\n  return (\n    <>\n      <div className='header'>\n        <h1 style={{marginLeft:'8px'}}>Springs in Our Communities</h1>\n        <p style= {{width: '77%', marginLeft:'8px',fontWeight:'bold', fontSize: '14px', marginBottom: '30px'}}>\n          We actually have a lot of springs in Southern Nevada. \n          However, just as in other arid areas, many of them likely remain unmapped. Where are they?\n          What do they look like? Where do they come from?\n        </p>        \n      </div>  \n      <MapContainer \n          style={{height: '70vh', width: '100%'}}\n          center = { [ 37.33254, -115.09724 ] }\n          zoom = { 7 }\n          scrollWheelZoom = { true }\n          zoomControl = {false}\n\n      >\n        <Layers />\n\n        <ZoomControl position='topright' />\n       { springsData.map(eachData => (\n         <Marker \n            key={eachData.Id} \n            position= {[eachData.Latitude, eachData.Longitude]}\n            eventHandlers={{\n              click: () => {\n                setSprings(eachData)\n              }\n            }}\n            \n          />\n       ))}\n\n      { springs && (\n        <Popup \n          position={ [ springs.Latitude, springs.Longitude ] }\n          onClose={()=>{\n            setSprings(null)\n          }}\n        >\n          <div>\n            <p>{ springs.Location }</p>\n            \n          </div>\n        </Popup>\n      )}\n\n      </MapContainer> \n      <div className='footer'>\n        <p style={{marginLeft:'8px', fontSize:'14px', fontWeight:'bold'}}>&copy; 2021 <a style={{color:'white'}} href=\"https://www.nova77.org\">Nova77 STEM Workshop</a></p>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}